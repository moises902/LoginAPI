// Code generated by go-swagger; DO NOT EDIT.

package records

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/t1cg/VL/api/backend/models"
)

// GetRecordsOKCode is the HTTP code returned for type GetRecordsOK
const GetRecordsOKCode int = 200

/*GetRecordsOK Returned data based on parameters

swagger:response getRecordsOK
*/
type GetRecordsOK struct {

	/*
	  In: Body
	*/
	Payload models.Records `json:"body,omitempty"`
}

// NewGetRecordsOK creates GetRecordsOK with default headers values
func NewGetRecordsOK() *GetRecordsOK {

	return &GetRecordsOK{}
}

// WithPayload adds the payload to the get records o k response
func (o *GetRecordsOK) WithPayload(payload models.Records) *GetRecordsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get records o k response
func (o *GetRecordsOK) SetPayload(payload models.Records) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecordsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Records{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRecordsInternalServerErrorCode is the HTTP code returned for type GetRecordsInternalServerError
const GetRecordsInternalServerErrorCode int = 500

/*GetRecordsInternalServerError Internal server error

swagger:response getRecordsInternalServerError
*/
type GetRecordsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecordsInternalServerError creates GetRecordsInternalServerError with default headers values
func NewGetRecordsInternalServerError() *GetRecordsInternalServerError {

	return &GetRecordsInternalServerError{}
}

// WithPayload adds the payload to the get records internal server error response
func (o *GetRecordsInternalServerError) WithPayload(payload *models.ReturnCode) *GetRecordsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get records internal server error response
func (o *GetRecordsInternalServerError) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecordsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetRecordsDefault Subscribe service unexpected error response

swagger:response getRecordsDefault
*/
type GetRecordsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ReturnCode `json:"body,omitempty"`
}

// NewGetRecordsDefault creates GetRecordsDefault with default headers values
func NewGetRecordsDefault(code int) *GetRecordsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRecordsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get records default response
func (o *GetRecordsDefault) WithStatusCode(code int) *GetRecordsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get records default response
func (o *GetRecordsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get records default response
func (o *GetRecordsDefault) WithPayload(payload *models.ReturnCode) *GetRecordsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get records default response
func (o *GetRecordsDefault) SetPayload(payload *models.ReturnCode) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRecordsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
